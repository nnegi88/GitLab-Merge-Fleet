# Overview
The GitLab Merge Fleet Repository Review feature currently analyzes repositories using their default branch. This enhancement modifies the workflow to focus on reviewing one repository at a time with branch selection capability. Users can select a specific branch from a dropdown list populated via GitLab API, providing flexibility for reviewing feature branches, release branches, or any other branch in the repository.

# Core Features

## Single Repository Selection
- What it does: Modifies the review interface to focus on analyzing one repository at a time
- Why it's important: Provides a more focused and streamlined review experience, reducing complexity and improving performance
- How it works at a high level: User selects a single repository from the list, then proceeds to branch selection

## Branch Selection Dropdown
- What it does: Adds a branch selector dropdown after repository selection
- Why it's important: Users often need to review code from specific branches (feature branches, release branches, hotfix branches) rather than just the default branch
- How it works at a high level: Once a repository is selected, the system fetches available branches via GitLab API and populates a searchable dropdown

## Real-time Branch Loading
- What it does: Fetches and displays available branches immediately after repository selection
- Why it's important: Provides immediate feedback and allows users to quickly select their desired branch
- How it works at a high level: Asynchronous API call to fetch branches with loading indicator

## Branch Validation
- What it does: Validates the selected branch exists and is accessible
- Why it's important: Prevents errors during analysis and ensures smooth review process
- How it works at a high level: Validates branch selection before proceeding to review configuration

# User Experience

## User Personas
- **Feature Developer**: Reviews their feature branch before creating merge requests
- **Security Auditor**: Performs security reviews on specific branches (release, hotfix, feature)
- **Tech Lead**: Reviews individual service branches to ensure code quality and standards
- **Code Reviewer**: Analyzes specific branches mentioned in merge requests

## Key User Flows

### Flow 1: Standard Repository Review with Branch Selection
1. User navigates to Repository Review page
2. Selects a single repository from the list
3. System automatically fetches available branches
4. User selects desired branch from dropdown
5. Configures review settings (depth, focus, file filters)
6. Runs analysis on selected branch

### Flow 2: Review Default Branch
1. User selects a repository
2. Branch dropdown loads with default branch pre-selected
3. User can proceed directly with review or change branch
4. Configures review settings
5. Runs analysis

### Flow 3: Search and Select Branch
1. User selects a repository with many branches
2. Uses search functionality in branch dropdown
3. Types partial branch name to filter results
4. Selects desired branch from filtered list
5. Proceeds with review configuration

## UI/UX Considerations
- Single repository selection with radio buttons or single-select list
- Branch dropdown appears immediately after repository selection
- Loading spinner while fetching branches
- Search/filter capability within branch dropdown for repositories with many branches
- Default branch pre-selected for convenience
- Clear indication of currently selected repository and branch
- Disabled state for review button until both repository and branch are selected

# Technical Architecture

## System Components

### Frontend Components
- Enhanced `RepositoryReview.vue`: Modified to support single repository selection with integrated branch dropdown
- Reuse existing branch fetching logic from `useProjectBranches` composable
- Add branch selection UI element (v-select with search) after repository selection

### Data Models
```javascript
// Simplified review configuration
{
  repository: {
    id: 123,
    name: "project-name",
    selectedBranch: "develop" // New field
  },
  reviewConfig: {
    depth: "standard",
    focus: "comprehensive",
    // ... existing config fields
  }
}
```

### APIs and Integrations
- Use existing `gitlabAPI.getBranches(projectId)` method when repository is selected
- Modify `getRepositoryTree` calls to include ref parameter for selected branch
- Update `getFileContent` and `getFileContentBatch` calls to fetch from specified branch
- Pass branch parameter to repository analysis API endpoint

### Infrastructure Requirements
- No new infrastructure needed
- Utilizes existing GitLab API integration
- Minimal API calls due to single repository focus

# Development Roadmap

## MVP Requirements

### Phase 1: Single Repository Selection
- Modify repository selection to support only single selection
- Update UI to use radio buttons or single-select list
- Remove multi-select checkbox functionality
- Update validation to ensure one repository is selected

### Phase 2: Branch Selection Integration
- Add branch dropdown component after repository selection
- Integrate with existing `useProjectBranches` composable
- Fetch branches immediately when repository is selected
- Display loading state while fetching branches
- Pre-select default branch once loaded

### Phase 3: API Integration
- Update `getRepositoryTree` API calls to include ref parameter
- Modify `getFileContent` and `getFileContentBatch` to use selected branch
- Pass branch information to the AI analysis endpoint
- Ensure all file operations use the selected branch reference

## Future Enhancements

### Phase 4: Enhanced UX
- Add branch search/filter for repositories with many branches
- Show branch last commit date and author
- Add recently used branches section
- Implement keyboard navigation for branch selection

### Phase 5: Advanced Features
- Branch comparison mode (compare two branches)
- Support for analyzing specific commits or tags
- Quick branch switching without re-selecting repository
- Branch history and analytics

# Logical Dependency Chain

1. **Foundation - Single Repository Selection**
   - Modify the repository list to support single selection only
   - Update state management to handle single repository
   - Ensure UI clearly indicates single selection mode

2. **Branch Fetching Integration**
   - Implement automatic branch fetching on repository selection
   - Add loading states and error handling
   - Cache branch data for better performance

3. **Branch Selection UI**
   - Add branch dropdown component to the review flow
   - Integrate search/filter functionality
   - Pre-select default branch
   - Show branch selection state clearly

4. **API Parameter Updates**
   - Update all GitLab API calls to include branch reference
   - Modify file discovery to use selected branch
   - Pass branch info to AI analysis endpoint

5. **Testing and Polish**
   - Test with repositories having many branches
   - Ensure smooth UX transitions
   - Add helpful tooltips and guidance
   - Optimize API calls and caching

# Risks and Mitigations

## Technical Challenges

### API Rate Limiting
- **Risk**: Even with single repository, frequent branch fetching could impact rate limits
- **Mitigation**: Cache branch data, reuse existing branch data when possible, implement smart refresh

### Performance with Many Branches
- **Risk**: Some repositories have hundreds of branches, making dropdown sluggish
- **Mitigation**: Implement search filtering, limit initial display to common branches, lazy load additional branches

### Branch Synchronization
- **Risk**: Selected branch might be deleted between selection and analysis
- **Mitigation**: Validate branch exists before starting analysis, show clear error if branch is missing

## Figuring out the MVP
- Start with basic single repository selection
- Add simple branch dropdown with search
- Use existing patterns from the codebase
- Focus on the most common workflow first

## Resource Constraints
- **Risk**: Development effort for UI changes
- **Mitigation**: Reuse existing components and patterns, minimal UI changes to existing flow

# Appendix

## Research Findings
- Users need focused reviews of specific branches
- Single repository review provides better performance and clearer results
- Branch selection is essential for reviewing feature/release branches
- Default branch pre-selection improves user experience

## Technical Specifications

### GitLab API Endpoints Used
- `GET /projects/:id/repository/branches` - List repository branches
- `GET /projects/:id/repository/tree?ref=branch-name` - Get repository tree for specific branch
- `GET /projects/:id/repository/files/:file_path?ref=branch-name` - Get file content from specific branch

### Frontend State Management
- Single repository selection in component state
- Branch data cached after fetch
- Selected branch passed through review flow

### UI Components
- v-radio-group or v-list with single selection for repositories
- v-select with search for branch selection
- Loading indicators during API calls
- Clear visual feedback for selections

### Error States
- No repository selected
- Branch loading failed
- Selected branch not found
- API rate limit exceeded